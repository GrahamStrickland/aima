#!/usr/bin/env python3
"""Depth-Limited-Search algorithm."""

from queue import LifoQueue

from ..data_structures import Node, Problem


def depth(node: Node) -> int:
    """Returns the depth of the given node in a tree-like search.
    
    Args:
        node (Node): A node generated by a tree-like search.

    Returns:
        depth (int): The depth of the node in the tree.
    """
    pass


def is_cycle(node: Node) -> bool:
    """Returns whether or not the path to the given node contains
    a cycle.
    
    Args:
        node (Node): A node generated by a tree-like search.

    Returns:
        is_cycle (bool): True if the path to the given node contains 
                         a cycle, else false.
    """
    pass


def depth_limited_search(problem: Problem) -> Node | None:
    """Expands the root node, the next child, repeating this process
    until the depth limit is reached, then backtracking to the next
    successor of the root. This process is repeated until a goal is 
    found or failure occurs.

    Args:
        problem: A problem instance.

    Returns:
        A solution node or failure (None).
    """
    pass
